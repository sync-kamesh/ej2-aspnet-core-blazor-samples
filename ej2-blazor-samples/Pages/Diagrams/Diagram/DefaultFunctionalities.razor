@page "/Diagrams/DefaultFunctionalities"

@using Syncfusion.EJ2.RazorComponents.Diagrams

@*Hidden:Lines*@
@using ej2_blazor_samples
@{
    SampleBrowser.CurrentSampleName = "Default Functionalities";
    SampleBrowser.CurrentControlName = "Diagram";
    SampleBrowser.CurrentControlCategory = "Diagram";
    SampleBrowser.CurrentControl = SampleBrowser.Config.Diagram;
    SampleBrowser.ActionDescription = new string[] {
        @" <p>
            This sample visualizes an organizational structure along with an overview for easily navigating the large organizational
            structure using Overview Panel.

        </p>"
    };
    SampleBrowser.Description = new string[] {
        @"<p>
            This example shows how to render the Overview Panel and how to display a preview (overall view) of the entire content of
            a diagram. This helps you look at the overall picture of a large diagram and also to navigate (pan or zoom) to a
            particular position of the page. The <code>SourceID</code> property can be used to map the diagram control with Overview Panel.
        </p>
        <br>"
    };
}
@*End:Hidden*@

<div class="control-section">
    <link href="https://ej2.syncfusion.com/javascript/demos/src/diagram/styles/diagram-common.css" rel="stylesheet">
    <div class="sb-mobile-palette-bar">
        <div Id="palette-icon" style="float: right;" role="button" class="e-ddb-icons1 e-toggle-palette"></div>
    </div>
    <div Id="palette-space" class="sb-mobile-palette">
        <EjsSymbolPalette Id="palettes" Width="100%" Height="700px" SymbolHeight=60 SymbolWidth=60 Palettes="@palette" SymbolMargin="@symbolMargin"></EjsSymbolPalette>
    </div>
    <div Id="diagram-space" class="sb-mobile-diagram">
        <EjsDiagram Id="diagram" Width="100%" Height="690px" Nodes="@nodes" SnapSettings="@snapSettings" Connectors="@connectors"></EjsDiagram>
    </div>

</div>


@code{
    private static object getFlowShape(string id, string shapeType)
    {
        return new { id = id, shape = new { type = "Flow", shape = shapeType } };
    }
    private List<DiagramNode>
    nodes
    { get; set; } = new List<DiagramNode>()
    {
            new DiagramNode() {
                Id= "NewIdea", Height = 60, Width = 145, OffsetX = 400 - 50, OffsetY = 80,Style = new { fill= "#357BD2", strokeColor= "white" },
                Shape = new { type= "Flow", shape= "Terminator" }, Annotations= new List < object >
            { new { content= "Place Order" , style=  new { color= "white", fill= "transparent" } } }
            },
            new DiagramNode() {
                Id= "Meeting", Height = 60, Width = 145, OffsetX = 400 - 50, OffsetY = 160,Style = new { fill= "#357BD2", strokeColor= "white" },
                Shape = new { type= "Flow", shape= "Process" }, Annotations=  new List < object >
            {
                    new { content= "Start Transaction", style=  new { color= "white", fill= "transparent" }  }
                }
            },
            new DiagramNode() {
                Id= "BoardDecision", Height = 60,Width = 145,  OffsetX = 400 - 50, OffsetY = 240,Style = new { fill= "#357BD2", strokeColor= "white" },
                Shape =new { type= "Flow", shape= "Process" }, Annotations=  new List < object >
            {
                    new { content= "Verification" , style=  new { color= "white", fill= "transparent" } }
                }
            },
            new  DiagramNode() {
                Id= "Project", Height = 60, Width = 145, OffsetX = 400 - 50, OffsetY = 330,Style = new { fill= "#357BD2", strokeColor= "white" },
                Shape = new { type= "Flow", shape= "Decision" }, Annotations= new List < object >
            {
                    new { content= "Credit card valid?", style=  new { color= "white", fill= "transparent" }  }
                }
            },
            new DiagramNode() {
                Id= "End", Height = 60, Width = 145, OffsetX = 400 - 50, OffsetY = 430,Style = new { fill= "#357BD2", strokeColor= "white" },
                Shape = new { type= "Flow", shape= "Decision" }, Annotations=  new List < object >
            {
                    new   { content= "Funds available?", style=  new { color= "white", fill= "transparent" }  }
                }
            },
            new DiagramNode() {
                Id= "node11", Height = 60,Width = 145,  OffsetX = (400 - 50) + 230, OffsetY = 330,Style = new { fill= "#357BD2", strokeColor= "white" },
                Shape = new { type= "Flow", shape= "Process" }, Annotations=  new List < object >
            {
                    new   { content= "Enter payment method", style=  new { color= "white", fill= "transparent" }  }
                }
            },
            new DiagramNode() {
            Id= "transaction_entered", Width = 145, Height = 60, OffsetX = (400 - 50), OffsetY = 630,Style = new { fill= "#357BD2", strokeColor= "white" },
            Shape = new{ type= "Flow", shape="Terminator" }, Annotations=  new List < object >
        {
            new   { content= "Log transaction", style=  new { color= "white", fill= "transparent" }  }
            }
        },
           new DiagramNode() {
                Id= "node12", Height = 60, Width = 145, OffsetX = (400 - 50) + 180, OffsetY = 630,Style = new { fill= "#357BD2", strokeColor= "white" },
                Shape = new { type= "Flow", shape= "Process" }, Annotations=  new List < object >
            {
                    new { content= "Reconcile the entries", style=  new { color= "white", fill= "transparent" }  }
                }
            },
            new DiagramNode() {
                Id= "transaction_completed", Width = 145, Height = 60, OffsetX = (400 - 50), OffsetY = 530,Style = new { fill= "#357BD2", strokeColor= "white" },
                Shape = new { type= "Flow", shape= "Process" }, Annotations=  new List < object >
            {
                    new { content= "Complete Transaction", style=  new { color= "white", fill= "transparent" }  }
                }
            },
            new DiagramNode() {
               Id= "Data", Height = 45, Width = 145, OffsetX = (400 - 50) - 190, OffsetY = 530,Style = new { fill= "#357BD2", strokeColor= "white" },
                Shape = new { type= "Flow", shape= "Data" }, Annotations=  new List < object >
            {
                    new { content= "Send e-mail", margin= new { left= 25, right= 25 }, style=  new { color= "white", fill= "transparent" }  }
                }
            },
            new DiagramNode() {
                Id= "node10", Height = 70, Width = 145, OffsetX = (400 - 50) + 175, OffsetY = 530,Style = new { fill= "#357BD2", strokeColor= "white" },
                Shape = new { type= "Flow", shape= "DirectData" }, Annotations=  new List < object >
            {
                    new { content= "Customer Database", margin= new { left= 25, right= 25 }, style=  new { color= "white", fill= "transparent" }  }
                }
            }
        };

    private List<DiagramConnector>
        connectors
    { get; set; } = new List<DiagramConnector>()
    {
        new DiagramConnector() { Id= "connector1", SourceID= "NewIdea", TargetID ="Meeting" },
        new DiagramConnector() { Id= "connector2", SourceID= "Meeting", TargetID ="BoardDecision" },
        new DiagramConnector() { Id= "connector3", SourceID= "BoardDecision", TargetID ="Project" },
        new DiagramConnector() { Id= "connector4", SourceID= "Project",
        Annotations= new List < object >
    { new{content= "Yes", style= new { fill= "white" } } }, TargetID ="End"
        },
        new  DiagramConnector() { Id= "connector5", SourceID= "End",
        Annotations= new List < object >
    { new{ content= "Yes", style= new { fill= "white" } } }, TargetID ="transaction_completed"
        },
        new DiagramConnector() { Id= "connector6", SourceID= "transaction_completed", TargetID ="transaction_entered" },
        new DiagramConnector() { Id= "connector7", SourceID= "transaction_completed", TargetID ="Data" },
        new DiagramConnector() { Id= "connector8", SourceID= "transaction_completed", TargetID ="node10" },
        new DiagramConnector() { Id= "connector9", SourceID= "node11", Type= Segments.Orthogonal, TargetID ="Meeting", Segments= new List < object >
    { new { direction= "Top", type= "Orthogonal", length= 120 } }
        },
        new DiagramConnector() {
        Id= "connector10", SourceID= "End", Type= Segments.Orthogonal, Annotations= new List < object >
    { new { content= "No", style= new { fill= "white" } } },
        TargetID ="node11", Segments= new List < object >
    { new{ direction= "Right", Type= Segments.Orthogonal, length= 100 } }
        },
        new DiagramConnector() { Id= "connector11", SourceID= "Project", Annotations= new List < object >
    { new { content= "No", style=new { fill= "white" } } }, TargetID ="node11"
        },
        new DiagramConnector() { Id= "connector12", Style=new { strokeDashArray= "2,2" }, SourceID= "transaction_entered", TargetID ="node12" }
        };

    private List<SymbolPalettePalette>
        palette
    { get; set; } = new List<SymbolPalettePalette>()
{
    new SymbolPalettePalette() {Id="flow", Expanded = true, Symbols =  new List <object>
{
    getFlowShape("Terminator", "Terminator"),
    getFlowShape("Process", "Process"),
    getFlowShape("Decision", "Decision"),
    getFlowShape("Document", "Document"),
    getFlowShape("PreDefinedProcess", "PreDefinedProcess"),
    getFlowShape("PaperTap", "PaperTap"),
    getFlowShape("DirectData", "DirectData"),
    getFlowShape("SequentialData", "SequentialData"),
    getFlowShape("Sort", "Sort"),
    getFlowShape("MultiDocument", "MultiDocument"),
    getFlowShape("Collate", "Collate"),
    getFlowShape("Or", "Or"),
    getFlowShape("Extract", "Extract"),
    getFlowShape("Merge", "Merge"),
    getFlowShape("OffPageReference", "OffPageReference"),
    getFlowShape("SequentialAccessStorage", "SequentialAccessStorage"),
    getFlowShape("Annotation", "Annotation"),
    getFlowShape("Annotation2", "Annotation2"),
    getFlowShape("Data", "Data"),
    getFlowShape("Card", "Card"),
    getFlowShape("Delay", "Delay"),
    }, IconCss = "e-ddb-icons e-flow", Title= "Flow Shapes" },
    new SymbolPalettePalette() {Id= "connectors", Expanded= true, Symbols= new List < object >
{
    new {
    id= "Link1", type= "Orthogonal", sourcePoint=new { x= 0, y= 0 }, targetPoint= new { x= 60, y= 60 },
    targetDecorator= new { shape= "Arrow" }, style= new { strokeWidth= 1 }
    },
    new  {
    id= "link3", type= "Orthogonal", sourcePoint= new { x= 0, y= 0 }, targetPoint= new { x= 60, y= 60 },
    style= new { strokeWidth= 1 }, targetDecorator= new { shape= "None" }
    },
    new {
    id= "Link21", type= "Straight", sourcePoint= new { x= 0, y= 0 }, targetPoint= new { x= 60, y= 60 },
    targetDecorator= new { shape= "Arrow" }, style= new { strokeWidth= 1 }
    },
    new {
    id= "link23", type= "Straight", sourcePoint= new { x= 0, y= 0 }, targetPoint= new { x= 60, y= 60 },
    style= new { strokeWidth= 1 }, targetDecorator= new { shape= "None" }
    },
    new  {
    id= "link33", type= "Bezier", sourcePoint= new { x= 0, y= 0 }, targetPoint= new { x= 60, y= 60 },
    style= new { strokeWidth= 1 }, targetDecorator= new { shape= "None" }
    }
    }, IconCss = "e-ddb-icons e-connector", Title = "Connectors" }
    };

    private object symbolMargin = new { left = 15, right = 15, top = 15, bottom = 15 };
    private object snapSettings = new
    {
        horizontalGridlines = new
        {
            lineColor = "#e0e0e0",
            lineIntervals = new List<double>
    {
        1, 9, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75
        }
        },
        verticalGridlines = new
        {
            lineColor = "#e0e0e0",
            lineIntervals = new List<double>
        {
            1, 9, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75
            }
        }
    };
}

